`timescale 1ns / 1ps

module pool_ram_test;

	reg clk;
	reg we;
	reg [9:0] addr_a;
	reg [9:0] addr_b;
	reg [23:0] data_a;
	reg [23:0] data_b;

	wire [23:0] a;
	wire [23:0] b;

	module_pool_ram #(.ADDR(10),.DATA(24))   uut (
		.clk(clk), 
		.we(we), 
		.addr_a(addr_a), 
		.addr_b(addr_b), 
		.data_a(data_a), 
		.data_b(data_b), 
		.a(a), 
		.b(b)
	);

	initial begin

		we = 1;
		addr_a = 1;
		addr_b = 1;
		data_a = 10;
		data_b =15;
		#15
		we = 1;
		addr_a = 2;
		addr_b = 2;
		data_a = 27;
		data_b = 28;
		#15
		we = 1;
		addr_a = 3;
		addr_b = 3;
		data_a = 31;
		data_b =35;
		#15
		we = 1;
		addr_a = 4;
		addr_b = 4;
		data_a = 40;
		data_b = 41;
		#15
		we = 0;
		addr_a = 1;
		addr_b = 1;
		data_a = 31;
		data_b =15;
		#15
		we = 0;
		addr_a = 2;
		addr_b = 3;
		data_a = 32;
		data_b = 16;
		#15
		we = 0;
		addr_a = 1;
		addr_b = 2;
		data_a = 31;
		data_b =15;
		#15
		we = 0;
		addr_a = 1;
		addr_b = 1;
		data_a = 0;
		data_b =0;
		#15
		we = 1;
		addr_a = 1;
		addr_b = 2;
		data_a = 11;
		data_b =22;
		#15
		we =1;
		addr_a = 5;
		addr_b = 6;
		data_a = 50;
		data_b = 60;
		#15
		we = 0;
		addr_a = 5;
		addr_b = 4;
		data_a = 31;
		data_b =15;
		#15
		we = 0;
		addr_a = 2;
		addr_b = 1;
		data_a = 32;
		data_b = 16;

	end
      
	initial begin
		clk=0;
		forever begin
			#10
			clk=~clk;
		end
	end
		
endmodule
